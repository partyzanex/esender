// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testEmails(t *testing.T) {
	t.Parallel()

	query := Emails(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testEmailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = email.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Emails(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EmailSlice{email}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testEmailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := EmailExists(tx, email.ID)
	if err != nil {
		t.Errorf("Unable to check if Email exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EmailExistsG to return true, but got false.")
	}
}
func testEmailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	emailFound, err := FindEmail(tx, email.ID)
	if err != nil {
		t.Error(err)
	}

	if emailFound == nil {
		t.Error("want a record, got nil")
	}
}
func testEmailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Emails(tx).Bind(email); err != nil {
		t.Error(err)
	}
}

func testEmailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Emails(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEmailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	emailOne := &Email{}
	emailTwo := &Email{}
	if err = randomize.Struct(seed, emailOne, emailDBTypes, false, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}
	if err = randomize.Struct(seed, emailTwo, emailDBTypes, false, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = emailOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = emailTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Emails(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEmailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	emailOne := &Email{}
	emailTwo := &Email{}
	if err = randomize.Struct(seed, emailOne, emailDBTypes, false, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}
	if err = randomize.Struct(seed, emailTwo, emailDBTypes, false, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = emailOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = emailTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func emailBeforeInsertHook(e boil.Executor, o *Email) error {
	*o = Email{}
	return nil
}

func emailAfterInsertHook(e boil.Executor, o *Email) error {
	*o = Email{}
	return nil
}

func emailAfterSelectHook(e boil.Executor, o *Email) error {
	*o = Email{}
	return nil
}

func emailBeforeUpdateHook(e boil.Executor, o *Email) error {
	*o = Email{}
	return nil
}

func emailAfterUpdateHook(e boil.Executor, o *Email) error {
	*o = Email{}
	return nil
}

func emailBeforeDeleteHook(e boil.Executor, o *Email) error {
	*o = Email{}
	return nil
}

func emailAfterDeleteHook(e boil.Executor, o *Email) error {
	*o = Email{}
	return nil
}

func emailBeforeUpsertHook(e boil.Executor, o *Email) error {
	*o = Email{}
	return nil
}

func emailAfterUpsertHook(e boil.Executor, o *Email) error {
	*o = Email{}
	return nil
}

func testEmailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Email{}
	o := &Email{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, emailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Email object: %s", err)
	}

	AddEmailHook(boil.BeforeInsertHook, emailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	emailBeforeInsertHooks = []EmailHook{}

	AddEmailHook(boil.AfterInsertHook, emailAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	emailAfterInsertHooks = []EmailHook{}

	AddEmailHook(boil.AfterSelectHook, emailAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	emailAfterSelectHooks = []EmailHook{}

	AddEmailHook(boil.BeforeUpdateHook, emailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	emailBeforeUpdateHooks = []EmailHook{}

	AddEmailHook(boil.AfterUpdateHook, emailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	emailAfterUpdateHooks = []EmailHook{}

	AddEmailHook(boil.BeforeDeleteHook, emailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	emailBeforeDeleteHooks = []EmailHook{}

	AddEmailHook(boil.AfterDeleteHook, emailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	emailAfterDeleteHooks = []EmailHook{}

	AddEmailHook(boil.BeforeUpsertHook, emailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	emailBeforeUpsertHooks = []EmailHook{}

	AddEmailHook(boil.AfterUpsertHook, emailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	emailAfterUpsertHooks = []EmailHook{}
}
func testEmailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEmailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx, emailColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEmailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = email.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testEmailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := EmailSlice{email}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testEmailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Emails(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	emailDBTypes = map[string]string{`DTCreated`: `int`, `DTSent`: `int`, `DTUpdated`: `int`, `Error`: `varchar`, `From`: `varchar`, `ID`: `int`, `MimeType`: `varchar`, `Status`: `enum('created','sent','error')`, `Text`: `text`, `Title`: `varchar`, `To`: `varchar`}
	_            = bytes.MinRead
)

func testEmailsUpdate(t *testing.T) {
	t.Parallel()

	if len(emailColumns) == len(emailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	if err = email.Update(tx); err != nil {
		t.Error(err)
	}
}

func testEmailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(emailColumns) == len(emailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	email := &Email{}
	if err = randomize.Struct(seed, email, emailDBTypes, true, emailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, email, emailDBTypes, true, emailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(emailColumns, emailPrimaryKeyColumns) {
		fields = emailColumns
	} else {
		fields = strmangle.SetComplement(
			emailColumns,
			emailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(email))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := EmailSlice{email}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testEmailsUpsert(t *testing.T) {
	t.Parallel()

	if len(emailColumns) == len(emailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	email := Email{}
	if err = randomize.Struct(seed, &email, emailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = email.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Email: %s", err)
	}

	count, err := Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &email, emailDBTypes, false, emailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Email struct: %s", err)
	}

	if err = email.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Email: %s", err)
	}

	count, err = Emails(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
