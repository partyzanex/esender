// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysql

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"gopkg.in/volatiletech/null.v6"
)

// Email is an object representing the database table.
type Email struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	To        string      `boil:"to" json:"to" toml:"to" yaml:"to"`
	From      string      `boil:"from" json:"from" toml:"from" yaml:"from"`
	Title     string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	MimeType  string      `boil:"mime_type" json:"mime_type" toml:"mime_type" yaml:"mime_type"`
	Text      string      `boil:"text" json:"text" toml:"text" yaml:"text"`
	Status    string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Error     null.String `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`
	DTCreated int         `boil:"dt_created" json:"dt_created" toml:"dt_created" yaml:"dt_created"`
	DTUpdated null.Int    `boil:"dt_updated" json:"dt_updated,omitempty" toml:"dt_updated" yaml:"dt_updated,omitempty"`
	DTSent    null.Int    `boil:"dt_sent" json:"dt_sent,omitempty" toml:"dt_sent" yaml:"dt_sent,omitempty"`

	R *emailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L emailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmailColumns = struct {
	ID        string
	To        string
	From      string
	Title     string
	MimeType  string
	Text      string
	Status    string
	Error     string
	DTCreated string
	DTUpdated string
	DTSent    string
}{
	ID:        "id",
	To:        "to",
	From:      "from",
	Title:     "title",
	MimeType:  "mime_type",
	Text:      "text",
	Status:    "status",
	Error:     "error",
	DTCreated: "dt_created",
	DTUpdated: "dt_updated",
	DTSent:    "dt_sent",
}

// emailR is where relationships are stored.
type emailR struct {
}

// emailL is where Load methods for each relationship are stored.
type emailL struct{}

var (
	emailColumns               = []string{"id", "to", "from", "title", "mime_type", "text", "status", "error", "dt_created", "dt_updated", "dt_sent"}
	emailColumnsWithoutDefault = []string{"to", "from", "title", "text", "error", "dt_created", "dt_updated", "dt_sent"}
	emailColumnsWithDefault    = []string{"id", "mime_type", "status"}
	emailPrimaryKeyColumns     = []string{"id"}
)

type (
	// EmailSlice is an alias for a slice of pointers to Email.
	// This should generally be used opposed to []Email.
	EmailSlice []*Email
	// EmailHook is the signature for custom Email hook methods
	EmailHook func(boil.Executor, *Email) error

	emailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	emailType                 = reflect.TypeOf(&Email{})
	emailMapping              = queries.MakeStructMapping(emailType)
	emailPrimaryKeyMapping, _ = queries.BindMapping(emailType, emailMapping, emailPrimaryKeyColumns)
	emailInsertCacheMut       sync.RWMutex
	emailInsertCache          = make(map[string]insertCache)
	emailUpdateCacheMut       sync.RWMutex
	emailUpdateCache          = make(map[string]updateCache)
	emailUpsertCacheMut       sync.RWMutex
	emailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var emailBeforeInsertHooks []EmailHook
var emailBeforeUpdateHooks []EmailHook
var emailBeforeDeleteHooks []EmailHook
var emailBeforeUpsertHooks []EmailHook

var emailAfterInsertHooks []EmailHook
var emailAfterSelectHooks []EmailHook
var emailAfterUpdateHooks []EmailHook
var emailAfterDeleteHooks []EmailHook
var emailAfterUpsertHooks []EmailHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Email) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range emailBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Email) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range emailBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Email) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range emailBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Email) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range emailBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Email) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range emailAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Email) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range emailAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Email) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range emailAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Email) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range emailAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Email) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range emailAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmailHook registers your hook function for all future operations.
func AddEmailHook(hookPoint boil.HookPoint, emailHook EmailHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		emailBeforeInsertHooks = append(emailBeforeInsertHooks, emailHook)
	case boil.BeforeUpdateHook:
		emailBeforeUpdateHooks = append(emailBeforeUpdateHooks, emailHook)
	case boil.BeforeDeleteHook:
		emailBeforeDeleteHooks = append(emailBeforeDeleteHooks, emailHook)
	case boil.BeforeUpsertHook:
		emailBeforeUpsertHooks = append(emailBeforeUpsertHooks, emailHook)
	case boil.AfterInsertHook:
		emailAfterInsertHooks = append(emailAfterInsertHooks, emailHook)
	case boil.AfterSelectHook:
		emailAfterSelectHooks = append(emailAfterSelectHooks, emailHook)
	case boil.AfterUpdateHook:
		emailAfterUpdateHooks = append(emailAfterUpdateHooks, emailHook)
	case boil.AfterDeleteHook:
		emailAfterDeleteHooks = append(emailAfterDeleteHooks, emailHook)
	case boil.AfterUpsertHook:
		emailAfterUpsertHooks = append(emailAfterUpsertHooks, emailHook)
	}
}

// OneP returns a single email record from the query, and panics on error.
func (q emailQuery) OneP() *Email {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single email record from the query.
func (q emailQuery) One() (*Email, error) {
	o := &Email{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: failed to execute a one query for email")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Email records from the query, and panics on error.
func (q emailQuery) AllP() EmailSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Email records from the query.
func (q emailQuery) All() (EmailSlice, error) {
	var o []*Email

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "mysql: failed to assign all query results to Email slice")
	}

	if len(emailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Email records in the query, and panics on error.
func (q emailQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Email records in the query.
func (q emailQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysql: failed to count email rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q emailQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q emailQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysql: failed to check if email exists")
	}

	return count > 0, nil
}

// EmailsG retrieves all records.
func EmailsG(mods ...qm.QueryMod) emailQuery {
	return Emails(boil.GetDB(), mods...)
}

// Emails retrieves all the records using an executor.
func Emails(exec boil.Executor, mods ...qm.QueryMod) emailQuery {
	mods = append(mods, qm.From("`email`"))
	return emailQuery{NewQuery(exec, mods...)}
}

// FindEmailG retrieves a single record by ID.
func FindEmailG(id int, selectCols ...string) (*Email, error) {
	return FindEmail(boil.GetDB(), id, selectCols...)
}

// FindEmailGP retrieves a single record by ID, and panics on error.
func FindEmailGP(id int, selectCols ...string) *Email {
	retobj, err := FindEmail(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindEmail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmail(exec boil.Executor, id int, selectCols ...string) (*Email, error) {
	emailObj := &Email{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `email` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(emailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysql: unable to select from email")
	}

	return emailObj, nil
}

// FindEmailP retrieves a single record by ID with an executor, and panics on error.
func FindEmailP(exec boil.Executor, id int, selectCols ...string) *Email {
	retobj, err := FindEmail(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Email) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Email) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Email) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Email) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("mysql: no email provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	emailInsertCacheMut.RLock()
	cache, cached := emailInsertCache[key]
	emailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			emailColumns,
			emailColumnsWithDefault,
			emailColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(emailType, emailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(emailType, emailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `email` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `email` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `email` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, emailPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to insert into email")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == emailMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for email")
	}

CacheNoHooks:
	if !cached {
		emailInsertCacheMut.Lock()
		emailInsertCache[key] = cache
		emailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Email record. See Update for
// whitelist behavior description.
func (o *Email) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Email record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Email) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Email, and panics on error.
// See Update for whitelist behavior description.
func (o *Email) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Email.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Email) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	emailUpdateCacheMut.RLock()
	cache, cached := emailUpdateCache[key]
	emailUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			emailColumns,
			emailPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("mysql: unable to update email, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `email` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, emailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(emailType, emailMapping, append(wl, emailPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to update email row")
	}

	if !cached {
		emailUpdateCacheMut.Lock()
		emailUpdateCache[key] = cache
		emailUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q emailQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q emailQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "mysql: unable to update all for email")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o EmailSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o EmailSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o EmailSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmailSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("mysql: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `email` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to update all in email slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Email) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Email) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Email) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Email) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("mysql: no email provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	emailUpsertCacheMut.RLock()
	cache, cached := emailUpsertCache[key]
	emailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			emailColumns,
			emailColumnsWithDefault,
			emailColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			emailColumns,
			emailPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("mysql: unable to upsert email, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "email", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `email` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(emailType, emailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(emailType, emailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysql: unable to upsert for email")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == emailMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to populate default values for email")
	}

CacheNoHooks:
	if !cached {
		emailUpsertCacheMut.Lock()
		emailUpsertCache[key] = cache
		emailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Email record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Email) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Email record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Email) DeleteG() error {
	if o == nil {
		return errors.New("mysql: no Email provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Email record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Email) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Email record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Email) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("mysql: no Email provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), emailPrimaryKeyMapping)
	sql := "DELETE FROM `email` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to delete from email")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q emailQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q emailQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("mysql: no emailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "mysql: unable to delete all from email")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o EmailSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o EmailSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("mysql: no Email slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o EmailSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmailSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("mysql: no Email slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(emailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `email` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to delete all from email slice")
	}

	if len(emailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Email) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Email) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Email) ReloadG() error {
	if o == nil {
		return errors.New("mysql: no Email provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Email) Reload(exec boil.Executor) error {
	ret, err := FindEmail(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EmailSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *EmailSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("mysql: empty EmailSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	emails := EmailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `email`.* FROM `email` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&emails)
	if err != nil {
		return errors.Wrap(err, "mysql: unable to reload all in EmailSlice")
	}

	*o = emails

	return nil
}

// EmailExists checks if the Email row exists.
func EmailExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `email` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysql: unable to check if email exists")
	}

	return exists, nil
}

// EmailExistsG checks if the Email row exists.
func EmailExistsG(id int) (bool, error) {
	return EmailExists(boil.GetDB(), id)
}

// EmailExistsGP checks if the Email row exists. Panics on error.
func EmailExistsGP(id int) bool {
	e, err := EmailExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// EmailExistsP checks if the Email row exists. Panics on error.
func EmailExistsP(exec boil.Executor, id int) bool {
	e, err := EmailExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
